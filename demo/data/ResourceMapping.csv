account									L	SELECT a.id, a.created, a.modified, p.id profile_id FROM account a LEFT JOIN profile p ON a.id = p.account_id WHERE a.id = {X}
											P	password					id					account_password
											RL	profile						profile_id			profile
	c						bool	true																// anyone can create account
		r	u	d			bool	{A} = {X}															// user can read, update, delete their own account
					l		list	{A}																	// user can list only their own account
account_password						PS	null
		-	u				bool	{A} = {X}															// account owner can update password, can't view password
profile									L	SELECT id, name, portrait_picture_id FROM profile p WHERE p.id = {X}
											RS	account						id					profile__account
											PS	detail						id					profile_detail
											PS	email						id					profile_email
											RL	picture						id					profile__picture
											RL	picture_friendship_invitee	id					profile__picture_friendship_invitee
											RL	share_picture_invitee		id					profile__share_picture_invitee
											RL	friendship_invitee			id					profile__friendship_invitee
											RL	friendship_inviter			id					profile__friendship_inviter
											RL	friendship_pending_invitee	id					profile__friendship_pending_invitee
											RL	friendship_pending_inviter	id					profile__friendship_pending_inviter
	c						bool	{A}																	// anyone with account can create profile
		r	-	-			bool	{A}/account/profile_id												// anyone with profile can read any profile
		r	u	d			bool	{A}/account/profile_id = {X}										// profile owner can read, update and delete their own profile
					l		list	{A}/account/profile_id												// user can list their own profiles
profile__account						RS	SELECT account_id FROM profile WHERE id = {X}
profile_detail							PS	SELECT created, modified FROM profile WHERE id = {X}
		r	-				bool	{A}/account/profile_id = {X}										// profile owner can read detail of profile
					l		list	{A}/account/profile_id												// profile owner can list detail of profiles
profile_email							PS	SELECT email FROM profile WHERE id = {X}
		r	-				bool	{A}/account/profile_id = {X}										// profile owner can read email of profile
					l		list	{A}/account/profile_id												// profile owner can list email of profiles
profile__picture						RL	SELECT picture_id FROM picture_credit WHERE profile_id = {X}
profile__picture_friendship_invitee		RL	SELECT picture_id FROM picture_credit pc JOIN friendship f ON pc.profile_id = f.inviter_profile_id WHERE f.invitee_profile_id = {X}
profile__share_picture_invitee			RL	SELECT id FROM share WHERE resource_type = 'picture' AND profile_invitee_id = {X}
profile__share_picture_inviter			RL	SELECT id FROM share WHERE resource_type = 'picture' AND profile_inviter_id = {X}
profile__friendship_invitee				RL	SELECT id FROM friendship WHERE invitee_profile_id = {X}
profile__friendship_inviter				RL	SELECT id FROM friendship WHERE inviter_profile_id = {X}
profile__friendship_pending_invitee		RL	SELECT id FROM friendship a LEFT JOIN friendship b ON b.invitee_profile_id = {X} AND a.invitee_profile_id = b.inviter_profile_id WHERE a.inviter_profile_id = {X} AND b.id IS NULL
profile__friendship_pending_inviter		RL	SELECT id FROM friendship a LEFT JOIN friendship b ON b.inviter_profile_id = {X} AND a.inviter_profile_id = b.invitee_profile_id WHERE a.invitee_profile_id = {X} AND b.id IS NULL
picture									L	SELECT id, raw, status, url_static_*, created, modified, pc.id "picture_credit_id" FROM picture p LEFT JOIN picture_credit pc ON p.id = pc.picture_id WHERE p.id = {X}
											RL	picture_comment				id					picture__picture_comment
											RL	picture_credit				picture_credit_id	picture_credit
	c						bool	{A}/account/profile_id												// anyone with profile can create pictures
		r	u	d			bool	{A}/account/profile/portrait_picture_id = {X}						// can read, update and delete profile owner's profile picture
		r	-	-			rlsp	{A}/account/profile/picture											// can read pictures that the profile owner has credit for
		r	-	-			rlsp	{A}/account/profile/picture_friendship_invitee						// can read pictures of profile owner's friends
??		r	-	-			bool	{A}/account/profile/share_picture_invitee/resource_id = {X}			// can read pictures shared with profile owner
??		r	-	-			bool	{A}/account/profile/friendship_invitee/profile_inviter/portrait_picture_id = {X}	// can read profile pictures of friends  ^ is subset of picture_friendship_invitee ^
		r	-	-			bool	{X}/picture-profile__profile/portrait_picture_id = {X}				// anyone with profile can read any profile picture
					l		list	{A}/account/profile/portrait_picture_id								// can list profile owner's own profile picture
					l		list	{A}/account/profile/picture/id										// can list pictures of the user's  ^ is superset of portrait_picture_id ^
picture__picture_comment				RL	SELECT id FROM picture_comment WHERE picture_id = {X}
picture-profile__profile				RL	SELECT id FROM profile WHERE picture_id = {X}
picture_credit							L	SELECT id, picture_id, profile_id FROM picture_credit WHERE id = {X}
											RS	picture						picture_id			picture
											RS	profile						profile_id			profile
	c						bool	{A}/account/profile_id												// anyone with profile can create a picture credit (validatity of picture credit params are done with validator)
		r	-	-			bool	{X}/picture_credit__picture/id = {X}								// can read a picture_credit of pictures you can read
		r	u	d			bool	{A}/account/profile_id = {X}/picture_credit__profile/id				// user can read, updated delete their own picture credits
picture_credit__profile					RL	SELECT profile_id FROM picture_credit WHERE id = {X}
picture_credit__picture					RL	SELECT picture_id FROM picture_credit WHERE id = {X}
picture_comment							L	SELECT id, picture_id, comment, profile_id, created FROM picture_comment WHERE id = {X}
											RS	picture						picture_id			picture
											RS	profile						profile_id			profile
	c						bool	{A}/account/profile_id												// anyone with profie can create a picture comment
		r	-	- 			bool	{X}/picture_comment__picture/id = {X}								// can read a picture_comment of pictures you can read
		r	u	d			bool	{A}/account/profile_id = {X}/picture_comment__profile/id			// user can read, updated delete their own picture comments
picture_comment__profile				RL	SELECT profile_id FROM picture_comment WHERE id = {X}
picture_comment__picture				RL	SELECT picture_id FROM picture_comment WHERE id = {X}
friendship								L	SELECT id, inviter_profile_id, invitee_profile_id, created FROM friendship WHERE id = {X}
	c						bool	{A}/account/profile_id												// 
		r	-	d	l		list	{A}/account/profile/friendship_inviter/friendship_id				// 
		r	-	-	l		list	{A}/account/profile/friendship_invitee/friendship_id				// 
share									L	SELECT id, resource_type, resource_id, inviter_profile_id, invitee_profile_id, created FROM share WHERE id = {X}
	c						bool	{A}/account/profile_id												// profile owner can create a share
		r	-	d	l		list	{A}/account/profile/share_picture_inviter/share_id					// share inviter can read and delete a share
		r	-	-	l		list	{A}/account/profile/share_picture_invitee/share_id					// share invitee can read a share


// example of a generator: would list every profie picture
picture_profile						GRL	SELECT picture_id FROM profile pr WHERE picture_id IS NOT NULL
		r	-	-	l		bool	{A}/account/profile_id


G generator
R relation
L list
P property


possible to define circlular dependencies in ACL, need to be able to detect and error once in such a scenario